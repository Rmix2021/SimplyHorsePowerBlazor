@page "/ProductsMenu"
@using SimplyHorsePower.Data
@inject ProductService productService
@inject CategoryService categoryService
@inject MakeService makeService
@inject NavigationManager NavigationManager

<h3>ProductsMenu</h3>

    <NavLink class="nav-link" href="AddProduct">
        <button class="btn btn-primary">Add new Product</button>
    </NavLink>

<NavLink class="nav-link" href="EditPricesByMakeCat">
        <button class="btn btn-primary">Edit Product bulk pricing</button>
    </NavLink>

<div class="container">
    <div class="row">
        <div class="col-12">
            <form >
                <InputSelect @bind-Value="makeName"  class="form-control" style="width:min-content">
                    <option value="">Brand</option>
                        @foreach (var make in MakeList)
                        {
                            <option value="@make.MakeId" style="width:auto">@make.MakeName</option>
                        }
                </InputSelect>
          
                <InputSelect @bind-Value="categoryName" class="form-control" style="width:min-content">
                    <option value="">Category</option>
                        @foreach (var category in CategoryList)
                        {
                            <option value="@category.CategoryId" style="width:auto">@category.CategoryName</option>
                        }
                </InputSelect>
            </form>

            <form>
                <input class="btn btn-danger" @onclick="@SortDropdown" value="Sort" />
            </form>

            <form>
            <input class="btn btn-warning" @onclick="@Cancel" value="Reset">
            </form>
        </div>



        <div class="products">
            <div class="row no-gutters">

                @if (products != null)
                    {

                    @foreach (var product in products)
                    {
                    <div class="col-md-3 mt-3 card flex-fill card-box card-body bg-light text-center">
                            <div class="card-img-actions col-md-6 col-lg-4">
                        <div class="container-fluid flex-fill">
                        <img src="@product.MainProductImageLocation" class="card-img img-fluid">
                        </div>

                            <h3><a href="#" class="mt-2 text-danger">@product.ProductName</a></h3>
                            <p class="text-secondary">@product.ProductDescription</p>
                            <a type="button" href="DeleteProduct/@product.ProductId"><span class="oi oi-pencil" aria-hidden="true">Remove</span></a>
                            <a type="button" href="EditProduct/@product.ProductId"><span class="oi oi-pencil" aria-hidden="true">Edit</span></a>
                            <a type="button" href="ProductGalleryImagesMenu/@product.ProductId"><span class="oi oi-pencil" aria-hidden="true">Photo Gallery Menu</span></a>
                        </div>
                    </div>
                    }
                    }
                else
                {
              
                <div>
                <h1>No Products yet!</h1>
                </div>
              
                }

            </div>
        </div>
    </div>
</div>



@code {
   
    private List<Product> products { get; set; }

    [BindProperty]
    public string makeName { get; set; }

    [BindProperty]
    public string categoryName { get; set; }

    [BindProperty]
    public List<Category> CategoryList { get; set; } = new List<Category>();

    [BindProperty]
    public List<Make> MakeList { get; set; } = new List<Make>();



    protected override async Task OnInitializedAsync()
    {
        MakeList = await makeService.GetAllMakesAsync();
        //MakeDropdownList.Insert(0, new Make("Select one", null, false));
        CategoryList = await categoryService.GetAllCategoriesAsync();
        //CategoryList.Insert(0, new SelectListItem("Select one", null, false));
        products = await productService.GetAllProductsAsync();
    }  

    protected void SortDropdown()
    {
        if (makeName != null && categoryName == null)
        {
            products = productService.GetFilteredProductsByMake(makeName);
        }
        else if (categoryName != null && makeName == null)
        {
            products = productService.GetFilteredProductsByCategory(categoryName);
        }
        else if (makeName != null && categoryName != null)
        {
            products = productService.GetFilteredProductsByCatMake(categoryName, makeName);
        }
        else
        {
            NavigationManager.NavigateTo("./ProductsMenu");
        }
    }

    void Cancel()
    {
   
        NavigationManager.NavigateTo("./ProductsMenu", true);
    }
}
